--- /home/massimiliano/Scaricati/vanilla.py
+++ /home/massimiliano/Progetti/python/VanillaWallet-master/vanilla.py
@@ -63,7 +63,7 @@
 import binascii
 from binascii import hexlify, unhexlify
 import hashlib
-
+import segno
 
 ### Globlals & Constants 
 
@@ -204,6 +204,14 @@
 ## RESULT PRINTING FUNCTIONS
 ##
 
+def printQrCode(protocol, data, save_as=None):
+    qrcode = segno.make(protocol+':'+data)
+    if save_as!=None:
+
+        qrcode.save((Args.directory+'/' if Args.directory else '' )+protocol+'_'+data+'.'+save_as, kind=save_as,scale=5))
+
+    return  qrcode.terminal()
+
 def banner(color, name):
     """
         Print a banner with a color and name of the coin
@@ -232,6 +240,8 @@
     print("\tSegWit Addr: ", key.segwit_address)
     bech = bech32.encode('tb', 0, dataDict["hash160"]) if Args.testnet else bech32.encode('bc', 0, dataDict["hash160"]) 
     print("\tBech32 Addr: ", bech)
+    if Args.qrcode != None:
+        printQrCode('bitcoin', key.address, Args.qrcodekind if Args.qrcodekind!="None" else None)
 
 
 def deriveEVMaddress():
@@ -397,6 +407,23 @@
     parser.add_argument("-j", "--json", help="Produce only json output", dest='json', action='store_const', const=True, default=False)
     parser.add_argument("-d", "--directory", help="An optional where to save produced files (json and qr codes)", type=str, required=False, default=".")
     parser.add_argument("-q", "--qrcode", help="Generate qrcodes for addresses and keys", dest='qrcode', action='store_const', const=True, default=False)
+    parser.add_argument("-qk", "--qrcodekind", help="Save qr code as ", 
+    type=str, required=False, default="None",
+        choices=[
+            "None",
+            "svg",
+            "png",
+            "eps",
+            "txt",
+            "pdf",
+            "ans",
+            "pbm",
+            "pam",
+            "ppm",
+            "tex",
+            "xbm",
+            "xpm" 
+      ])
 
     Args = parser.parse_args()
 
@@ -432,4 +459,3 @@
     hash160()
 
     main()
-
